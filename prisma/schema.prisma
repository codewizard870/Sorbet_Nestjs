// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String       @id @default(auto()) @map("_id") @db.ObjectId
  nearWallet            String?      @unique
  firstName             String?
  lastName              String?
  email                 String       @unique
  bio                   String?
  confirmationCode      String?      @unique
  profileImage          String?
  connections           String[]     @db.ObjectId @default([])
  connection_requests   String[]     @db.ObjectId @default([])
  followers             String[]     @db.ObjectId @default([])
  following             String[]     @db.ObjectId @default([])
  jobProfile            JobProfile[]
  token                 Token?
  location              Location[]
  post                  Post[]
  groupIDs              String[]     @db.ObjectId
  groups                Group[]      @relation(name: "members", fields: [groupIDs], references: [id])
  createdAt             DateTime     @default(now())
}

model JobProfile {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  type      String?
  createdAt DateTime      @default(now())
  //relation with user
  user      User?         @relation(fields: [userId], references: [id])
  userId    String?       @db.ObjectId
}

enum Status {
  Pending  @map("pending")
  Active   @map("active")
  Disabled @map("disabled")

  @@map("Status")
}

model SocialMedia {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  socialMedia String
  link        String
}

model Token {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  createdAt DateTime      @default(now())

  //relation with user
  user   User             @relation(fields: [userId], references: [id])
  userId String           @unique @db.ObjectId
}

model Event {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  event_image String
  event_link  String
  name String
  description String
  timezone    DateTime
  start_date  DateTime
  end_date    DateTime?
  location    Location[]
  //relation with post
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String      @db.ObjectId
}

model Gig {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  timezone      DateTime
  start_date    DateTime
  end_date      DateTime?
  title         String
  description   String
  gig_price_min Int
  gig_price_max Int
  tags          String[]
  location      Location[]
  //relation with post
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String    @db.ObjectId
}

model Post {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  timestamp DateTime
  text      String?
  content   Content
  gig       Gig[]
  event     Event[]
  blob      Blob[]
  location  Location[]
  //relation with user
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String        @db.ObjectId
}

model Blob {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl String
  videoUrl String

  //relation with post
  post   Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String           @unique @db.ObjectId
}

model Location {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  location_type LocationType
  country       String
  province      String
  district      String
  city          String
  Latitude      Float
  Langitude     Float

// relation with post
  post   Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?          @db.ObjectId

  // relation with user
  user         User?      @relation(fields: [userId], references: [id])
  userId       String?    @db.ObjectId

  // relation with event
  event         Event?    @relation(fields: [eventId], references: [id])
  eventId       String?   @db.ObjectId

  // relation with gig
  gig           Gig?      @relation(fields: [gigId], references: [id])
  gigId         String?   @db.ObjectId

  // relation with group
  group         Group?    @relation(fields: [groupId], references: [id])
  groupId       String?   @db.ObjectId

  // relation with collab
  // collab        Collab?   @relation(fields: [collabId], references: [id])
  // collabId      String?   @db.ObjectId
}

enum Content {
  Gig   @map("gig")
  Event @map("event")
  Blob  @map("blob")

  @@map("Content")
}

enum LocationType {
  Remote @map("remote")
  OnSite @map("onSite")

  @@map("LocationType")
}

model Contact {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String
  contacted_userId String
  chat             Chat[]
}

model Chat {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  creatorId String
  createdAt DateTime        @default(now())
  updatedAt DateTime?       @default(now())

  //relation with contact
  contact   Contact         @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String          @db.ObjectId
}

model Collab {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  collabId         String
  userId           String
  wallet_address   String
  public_key       String
  // location         Location[]
  createdAt        DateTime
  updatedAt        DateTime?
}

model Group {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String?
  image            String?
  group_owner      String   @db.ObjectId
  userIDs          String[] @db.ObjectId
  members          User[]   @relation(name: "members", fields: [userIDs], references: [id])
  location         Location[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime?
}
