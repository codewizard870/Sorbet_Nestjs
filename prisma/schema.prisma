// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  nearWallet          String?  @unique
  firstName           String?
  lastName            String?
  email               String?
  bio                 String?
  confirmationCode    String?  @unique
  profileImage        String?
  profileBannerImage  String?
  tags                String[] @default([])
  connections         String[] @default([]) @db.ObjectId
  connection_requests String[] @default([]) @db.ObjectId

  followers Follow[] @relation("followers")
  following Follow[] @relation("following")

  like       Like[]
  comment    Comment[]
  jobProfile JobProfile[]
  token      Token?
  location   Location?
  post       Post[]
  groupIDs   String[]     @db.ObjectId
  groups     Group[]      @relation(name: "members", fields: [groupIDs], references: [id])
  widgets    Widget[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime?
}

model JobProfile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  type      String?
  createdAt DateTime @default(now())
  //relation with user
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

enum Status {
  Pending  @map("pending")
  Active   @map("active")
  Disabled @map("disabled")

  @@map("Status")
}

model SocialMedia {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  socialMedia String
  link        String
}

model Token {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  createdAt DateTime @default(now())

  // relation with user
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime

  // relation with user
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  // relation with Post
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId

  @@unique([userId, postId])
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String    @map("text")
  createdAt DateTime
  updatedAt DateTime?

  // relation with user
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  // realtion with Post
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

model Follow {
  id         String @id @default(auto()) @map("_id") @db.ObjectId

  // relation with user
  fromUser   User   @relation(name: "following", fields: [fromUserId], references: [id])
  fromUserId String @db.ObjectId

  toUser     User?   @relation(name: "followers", fields: [toUserId], references: [id])
  toUserId   String? @db.ObjectId

  // relation with Post
  toPost     Post?   @relation(fields: [toPostId], references: [id])
  toPostId   String? @db.ObjectId

  @@unique([fromUserId, toUserId, toPostId])
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime
  title       String?
  description String?

  imageUrl String?
  videoUrl String?

  //Gig only
  serviceType LocationType?
  category    String?
  subCategory String?
  seachTags   String[]
  salary      String?
  start_date  DateTime?
  end_date    DateTime?

  //event only
  startDate    DateTime?
  endDate      DateTime?
  startTime    String?
  endTime      String?
  venue        String?
  externalLink String?

  //post type
  postType PostType

  //relations
  location  Location[]
  like      Like[]
  comment  Comment[]
  followers Follow[]

  //relation with user
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model Location {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  locationType LocationType
  address      String
  latitude     Float
  langitude    Float

  // relation with post
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String? @db.ObjectId

  // relation with user
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique @db.ObjectId

  // relation with group
  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String? @db.ObjectId

  // relation with collab
  // collab        Collab?   @relation(fields: [collabId], references: [id])
  // collabId      String?   @db.ObjectId
}

enum PostType {
  Gig   @map("gig")
  Event @map("event")
  Post  @map("post")

  @@map("PostType")
}

enum LocationType {
  Remote @map("Remote")
  OnSite @map("OnSite")
  Online @map("Online")
  InPerson @map("In Person")
  @@map("LocationType")
}

model Contact {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String
  contacted_userId String
  chat             Chat[]
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  creatorId String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())

  //relation with contact
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String  @db.ObjectId
}

model Collab {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  collabId       String
  userId         String
  wallet_address String
  public_key     String
  // location         Location[]
  createdAt      DateTime
  updatedAt      DateTime?
}

model Group {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?
  group_owner String     @db.ObjectId
  userIDs     String[]   @db.ObjectId
  members     User[]     @relation(name: "members", fields: [userIDs], references: [id])
  location    Location[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @default(now())
}

enum WidgetType {
  NFT                     @map("nft")
  Photo                   @map("photo")
  Photo_Album             @map("photo_album")
  Youtube_Video           @map("youtube_video")
  Youtube_Plalist         @map("youtube_playlist")
  Spotify_Song            @map("spotify_song")
  Spotify_Album           @map("spotify_album")
  Soundcloud_Song         @map("soundcloud_song")
  Github_Profile          @map("github_profile")
  Instagram_Post          @map("instagram_post")
  Instagram_Profile       @map("instagram_profile")
  Twitter_Profile         @map("twitter_profile")
  Apple_Music_Song        @map("apple_music_song")
  Apple_Music_Playlist    @map("apple_music_playlist")
  Apple_Podcast_Episode   @map("apple_podcast_episode")
  Apple_Podcast_Playlist  @map("apple_podcast_playlist")
  Dribbble_Shot           @map("dribble_shot")

  @@map("WidgetType")
}

model Widget {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  username     String?
  url          String?
  name         String?
  description  String?
  type         String?
  image        String?
  nft_metadata String?
  userId       String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @default(now())
}
